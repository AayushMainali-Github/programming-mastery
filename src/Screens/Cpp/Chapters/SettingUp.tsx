import React from "react";
import Bottom from "../../../Components/Bottom";
import { Prism as Code } from "react-syntax-highlighter";
import { materialDark } from "react-syntax-highlighter/dist/esm/styles/prism";

const SettingUpCPPEnvironment = () => {
  return (
    <div className="screenContainer">
      <div className="screenSubContainer">
        <div className="header">Setting Up the C++ Environment</div>
        <div className="description">
          Getting started with C++ requires installing a compiler, choosing a suitable Integrated Development Environment (IDE), and configuring build tools. This chapter provides
          detailed steps and recommendations to set up your development environment for efficient C++ programming.
        </div>

        <div className="subHeader">Installing Compilers</div>
        <div className="description">To compile C++ code, you need a compiler. Popular options include:</div>
        <ul className="list">
          <li>
            <b>GCC (GNU Compiler Collection):</b> Widely used on Linux and available on Windows via MinGW or Cygwin.
          </li>
          <li>
            <b>Clang:</b> A modern compiler with fast compilation and excellent diagnostics, available on macOS and Linux.
          </li>
          <li>
            <b>MSVC (Microsoft Visual C++):</b> The default compiler for Windows, integrated with Visual Studio.
          </li>
        </ul>
        <div className="description">For example, to install GCC on a Debian-based Linux distribution, you can use:</div>
        <Code language="bash" style={materialDark} showLineNumbers>{`sudo apt update
sudo apt install build-essential`}</Code>

        <div className="subHeader">Choosing an IDE</div>
        <div className="description">An IDE provides a robust environment for writing, debugging, and managing your C++ projects. Popular IDEs include:</div>
        <ul className="list">
          <li>
            <b>Visual Studio Code:</b> Lightweight, highly customizable, with great extensions for C++.
          </li>
          <li>
            <b>CLion:</b> A powerful, cross-platform IDE specifically designed for C++ development.
          </li>
          <li>
            <b>Visual Studio:</b> A comprehensive IDE for Windows offering deep integration with MSVC.
          </li>
        </ul>
        <div className="description">
          For instance, to install Visual Studio Code, visit{" "}
          <a className="link" href="https://code.visualstudio.com/" target="_blank" rel="noopener noreferrer">
            code.visualstudio.com
          </a>
          .
        </div>

        <div className="subHeader">Configuring Build Tools</div>
        <div className="description">Build tools automate the compilation process and manage project dependencies. Common build tools for C++ include:</div>
        <ul className="list">
          <li>
            <b>Make:</b> A classic build automation tool using Makefiles.
          </li>
          <li>
            <b>CMake:</b> A cross-platform build system that generates native build scripts (e.g., Makefiles, Visual Studio projects).
          </li>
          <li>
            <b>Ninja:</b> A small build system focused on speed, often used with CMake.
          </li>
        </ul>
        <div className="description">For example, to install CMake on a Debian-based system:</div>
        <Code language="bash" style={materialDark} showLineNumbers>{`sudo apt update
sudo apt install cmake`}</Code>
        <div className="description">
          CMake uses a <code>CMakeLists.txt</code> file to define the build configuration. Hereâ€™s a basic example:
        </div>
        <Code language="plaintext" style={materialDark} showLineNumbers>{`cmake_minimum_required(VERSION 3.10)
project(MyCPPProject)

set(CMAKE_CXX_STANDARD 17)

add_executable(MyCPPProject main.cpp)`}</Code>

        <div className="subHeader">Sample Project Structure</div>
        <div className="description">A well-organized project structure helps maintain code clarity. A typical C++ project might have:</div>
        <ul className="list">
          <li>
            <b>src/</b>: Contains source code files (.cpp and .h files).
          </li>
          <li>
            <b>include/</b>: Contains header files.
          </li>
          <li>
            <b>build/</b>: Contains build output, generated by your build tool (e.g., CMake, Make).
          </li>
          <li>
            <b>tests/</b>: Contains unit and integration tests.
          </li>
          <li>
            <b>CMakeLists.txt:</b> Configuration file for CMake (if used).
          </li>
        </ul>

        <div className="subHeader">Best Practices</div>
        <ul className="list">
          <li>Keep your build configuration files and project structure organized for easier maintenance.</li>
          <li>Regularly update your compiler and IDE to take advantage of new features and improvements.</li>
          <li>Leverage IDE extensions for code formatting, linting, and debugging.</li>
          <li>Utilize version control to track changes in your build scripts and configuration files.</li>
        </ul>

        <div className="subHeader">Key Takeaways</div>
        <ul className="list">
          <li>Installing a C++ compiler, IDE, and build tools is the first step toward a productive C++ development environment.</li>
          <li>Choose the tools that best fit your project requirements and operating system.</li>
          <li>Organize your project structure and build configurations to enhance maintainability and scalability.</li>
          <li>Keeping your development environment up-to-date is essential for taking full advantage of modern C++ features.</li>
        </ul>

        <Bottom back="/cpp/introduction-to-cpp" next="/cpp/basic-syntax-and-structure" />
      </div>
    </div>
  );
};

export default SettingUpCPPEnvironment;
